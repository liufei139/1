#include<stdio.h>
#include<stdlib.h>
#include<time.h>

int main()
{
    int a[10], b[10], sum[10], k;
    int i, j, m, n, t = 0;
    int temp,flag=0,qw;
    char q;
    float aa[10], bb[10], sums[10];
    printf_s("请输入运算符\n");
    q = getchar();
    //选择运算，输入“+，-，*，/”四个运算符决定运算类型。 
    printf_s("请输入题目数量\n");
    scanf_s("%d", &n);
    
    printf_s("请设置最大数\n");
    scanf_s("%d", &temp);

    printf_s("输入1添加小数，输入0不添加\n");
    scanf_s("%d", &qw);
    flag = qw;

    printf_s("你将要答题 %d道\n", n);
    //选择题目数量 。
    if (flag == 0) {
        for (i = 1; i <= n; i++)
            //产生n道题目

        {
            srand((unsigned)time(NULL));
            a[i] = rand() % temp + 1;
            b[i] = rand() % temp + 1;

            //随机产生两个1~100的随机数 。

            while (q == '+' && a[i] + b[i] > 100) { srand((unsigned)time(NULL)); a[i] = rand() % temp + 1; b[i] = rand() % temp + 1; }
            while (q == '-' && a[i] - b[i] < 0) { srand((unsigned)time(NULL)); a[i] = rand() % temp + 1; b[i] = rand() % temp + 1; }
            while (q == '*' && a[i] * b[i] > 100) { srand((unsigned)time(NULL)); a[i] = rand() % temp + 1; b[i] = rand() % temp + 1; }
            while (q == '/' && (a[i] / b[i] < 0 || a[i] % b[i] != 0)) { srand((unsigned)time(NULL)); a[i] = rand() % temp + 1; b[i] = rand() % temp + 1; }

            //保证出的题目不超纲，即加法和与乘积不能超出100、减法结果不能出现负数、除法必须能整除。

            if (q == '+') { printf_s("%d. %d+%d= \n", i, a[i], b[i]); sum[i] = a[i] + b[i]; }
            if (q == '-') { printf_s("%d. %d-%d= \n", i, a[i], b[i]); sum[i] = a[i] - b[i]; }
            if (q == '*') { printf_s("%d. %d*%d= \n", i, a[i], b[i]); sum[i] = a[i] * b[i]; }
            if (q == '/') { printf_s("%d. %d/%d= \n", i, a[i], b[i]); sum[i] = a[i] / b[i]; }

            //输出公式让用户计算，并保留正确答案 。 

            for (j = 1; j <= 2; j++)
            {
                scanf_s("%d", &m);
                if (m == sum[i]) { printf_s("Very Good\n"); t = t + 1; break; }
                else printf_s("Wrong!!\n");
            }
            //判断用户输入答案的正确性，最多有两次答题机会。	
        }
    }
    if (flag == 1) {//小数运算部分
        for (i = 1; i <= n; i++)
            //产生n道题目

        {
            srand((unsigned)time(NULL));
            aa[i] = 1.0 * rand() / RAND_MAX * (temp)*10;
            aa[i] = (int)aa[i]/10;
            bb[i] = 1.0 * rand() / RAND_MAX * (temp)*10;
            bb[i] = (int)bb[i] / 10;
            //随机产生两个1~100的随机数 。

            while (q == '+' && aa[i] + bb[i] > 100) { srand((unsigned)time(NULL)); aa[i] = 1.0 * rand() / RAND_MAX * (temp) * 10; aa[i] = (int)aa[i] / 10; bb[i] = 1.0 * rand() / RAND_MAX * (temp) * 10; bb[i] = (int)bb[i] / 10;
            }
            while (q == '-' && aa[i] - bb[i] < 0) { srand((unsigned)time(NULL)); aa[i] = 1.0 * rand() / RAND_MAX * (temp) * 10; aa[i] = (int)aa[i] / 10; bb[i] = 1.0 * rand() / RAND_MAX * (temp) * 10; bb[i] = (int)bb[i] / 10;
            }
            while (q == '*' && aa[i] * bb[i] > 100) { srand((unsigned)time(NULL)); aa[i] = 1.0 * rand() / RAND_MAX * (temp) * 10; aa[i] = (int)aa[i] / 10; bb[i] = 1.0 * rand() / RAND_MAX * (temp) * 10; bb[i] = (int)bb[i] / 10;
            }
            while (q == '/' && (aa[i] / bb[i] < 0 )) { srand((unsigned)time(NULL)); aa[i] = 1.0 * rand() / RAND_MAX * (temp) * 10; aa[i] = (int)aa[i] / 10; bb[i] = 1.0 * rand() / RAND_MAX * (temp) * 10; bb[i] = (int)bb[i] / 10;
            }

            //保证出的题目不超纲，即加法和与乘积不能超出100、减法结果不能出现负数、除法必须能整除。

            if (q == '+') { printf_s("%d. %.1f+%.1f= \n", i, aa[i], bb[i]); sums[i] = aa[i] + bb[i]; }
            if (q == '-') { printf_s("%d. %.1f-%.1f= \n", i, aa[i], bb[i]); sums[i] = aa[i] - bb[i]; }
            if (q == '*') { printf_s("%d. %.1f*%.1f= \n", i, aa[i], bb[i]); sums[i] = aa[i] * bb[i]; }
            if (q == '/') { printf_s("%d. %.1f/%.1f= \n", i, aa[i], bb[i]); sums[i] = aa[i] / bb[i]; }

            //输出公式让用户计算，并保留正确答案 。 

            for (j = 1; j <= 2; j++)
            {
                scanf_s("%d", &m);
                if (m == sums[i]) { printf_s("Very Good\n"); t = t + 1; break; }
                else printf_s("Wrong!!\n");
            }
            //判断用户输入答案的正确性，最多有两次答题机会。	
        }
    }
    printf_s("正确率：百分之%d\n", t * 100 / n);

    //输出正确率 

    return 0;
}
