#include<iostream>
#include<stdlib.h>
using namespace std;
typedef struct Tree
{
	char val;
	Tree* lchild, * rchild, * parent;
}Tree,*LiTree;
void CreateTree(LiTree& root,LiTree& a);
void PrintTree(LiTree bt, int nlayer);
LiTree S;
char b[10][1000];
bool visited[100];
void ManageTree(LiTree& root,char target);
void ErgodicTree(LiTree& root, int i, int k, int& z);
void print(int k);
int main()
{
	LiTree T, K = NULL;
	cout << "请先序输入二叉树" << endl;
	CreateTree(T,K);
	int nlayer = 1;
	cout << "输入的二叉树为：" << endl;
	PrintTree(T, nlayer);
	char target;
	int k;
	cout << "请输入target" << endl;
	cin >> target;
	cout << "请输入k" << endl;
	cin >> k;
	int i = 1, z = 0;
	ManageTree(T, target);
	ErgodicTree(S, i, k, z);
	print(k);
	return 0;
}
void CreateTree(LiTree& root,LiTree& a)
{
	char ch;
	cin >> ch;
	if (ch == '*')
		root = NULL;
	else
	{
		root = new Tree();
		root->val = ch;
		root->parent = a;
		visited[root->val] = true;
		CreateTree(root->lchild,root);
		CreateTree(root->rchild,root);
	}
}
void ManageTree(LiTree& root,char target)
{
	if (root != NULL)
	{
		if (root->val == target)
			S = root; 
		ManageTree(root->lchild, target);
		ManageTree(root->rchild, target);
	}
}
void ErgodicTree(LiTree& root, int i, int k, int& z)
{
	if (root != NULL)
	{
		int flag = 0;
		if (i > k)
			return;
		if (visited[root->val] == false)
			return;
		visited[root->val] = false;
		if (root->lchild != NULL && visited[root->lchild->val] == true)
		{
			flag = 1;
			b[i][z] = root->lchild->val;
		}
		if (root->rchild != NULL && visited[root->rchild->val] == true)
		{
			flag = 1;
			b[i][z + 1] = root->rchild->val;
		}
		if (root->parent != NULL && visited[root->parent->val] == true)
		{ 
			flag = 1;
			b[i][z + 2] = root->parent->val;
		}
		if (flag == 1)
		{
			i++;
			z = z + 3;
		}
		ErgodicTree(root->lchild, i, k, z);
		ErgodicTree(root->rchild, i, k, z);
		ErgodicTree(root->parent, i, k, z);
	}
}
void print(int k)
{
	int flag = 0;
	int i;
	cout << "距离为"<<k<<"的结点为:";
	for (i = 0; i < 1000; i++)
	{
		if (b[k][i] != '\0')
		{
			flag = 1;
			cout << b[k][i] << ",";
		}
	}
	if (flag == 0)
		cout << ":" << "无";
	
}
void PrintTree(LiTree bt, int nlayer) //按树状打印二叉树
{
	if (bt != NULL)
	{
		PrintTree(bt->rchild, nlayer + 1);
		for (int i = 0; i < nlayer; i++)
		{
			cout << "  ";
		}
		cout<<bt->val << endl;
		PrintTree(bt->lchild, nlayer + 1);
	}
}
